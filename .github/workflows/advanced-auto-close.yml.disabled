name: Advanced Auto Close Issues

on:
  push:
    branches: [develop]

permissions:
  issues: write
  contents: read

jobs:
  close-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Close issues with advanced features
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commits = context.payload.commits || [];
            const closedIssues = [];
            
            console.log(`🚀 Advanced Auto Close Issues started`);
            console.log(`📦 Processing ${commits.length} commits from develop branch`);
            
            for (const commit of commits) {
              const message = commit.message;
              console.log(`\n🔍 Analyzing commit: ${commit.id.substring(0, 7)}`);
              console.log(`📝 Message: ${message}`);
              console.log(`👤 Author: ${commit.author.name}`);
              
              // 더 유연한 패턴 매칭 (한국어 + 영어)
              const patterns = [
                // 영어 패턴
                /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s*:?\s*#(\d+)/gi,
                // 한국어 패턴 (앞에 오는 경우)
                /(?:해결|수정|완료|닫기)\s*:?\s*#(\d+)/gi,
                // 한국어 패턴 (�에 오는 경우)
                /#(\d+)\s*(?:해결|수정|완료|닫기)/gi,
                // 추가 패턴
                /\b(?:bug|버그)\s*(?:fix|수정)\s*:?\s*#(\d+)/gi
              ];
              
              for (const pattern of patterns) {
                let match;
                pattern.lastIndex = 0; // 정규식 리셋
                
                while ((match = pattern.exec(message)) !== null) {
                  const issueNumber = parseInt(match[1]);
                  
                  // 중복 처리 방지
                  if (!closedIssues.includes(issueNumber)) {
                    console.log(`✅ Found issue #${issueNumber} to close`);
                    
                    try {
                      // 이슈 정보 가져오기
                      const issue = await github.rest.issues.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issueNumber
                      });
                      
                      if (issue.data.state === 'open') {
                        // 라벨 추가 (존재하지 않으면 무시됨)
                        try {
                          await github.rest.issues.addLabels({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: issueNumber,
                            labels: ['auto-closed', 'develop-branch']
                          });
                          console.log(`🏷️ Added labels to issue #${issueNumber}`);
                        } catch (labelError) {
                          console.log(`⚠️ Could not add labels to issue #${issueNumber}: ${labelError.message}`);
                        }
                        
                        // 이슈 닫기
                        await github.rest.issues.update({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issueNumber,
                          state: 'closed'
                        });
                        
                        // 상세 코멘트 추가
                        const commentBody = `## 🤖 자동으로 이슈가 닫혔습니다

### 📋 커밋 정보
- **브랜치**: \`develop\`
- **커밋 ID**: \`${commit.id.substring(0, 7)}\`
- **작성자**: ${commit.author.name}
- **시간**: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

### 💬 커밋 메시지
\`\`\`
${commit.message}
\`\`\`

### 📊 이슈 통계
- **원래 상태**: ${issue.data.state}
- **라벨**: ${issue.data.labels.map(label => label.name).join(', ') || '없음'}
- **마일스톤**: ${issue.data.milestone ? issue.data.milestone.title : '없음'}

### 🔗 관련 링크
- [커밋 보기](${commit.url})
- [파일 변경사항](${commit.url}/files)
- [브랜치 히스토리](https://github.com/${context.repo.owner}/${context.repo.repo}/commits/develop)

---
*이 작업은 GitHub Actions의 Advanced Auto Close 워크플로우에 의해 자동으로 수행되었습니다.*
*문제가 있다면 이슈를 다시 열거나 새로운 이슈를 생성해주세요.*`;

                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issueNumber,
                          body: commentBody
                        });
                        
                        closedIssues.push(issueNumber);
                        console.log(`🎉 Successfully closed issue #${issueNumber}`);
                        
                      } else {
                        console.log(`ℹ️ Issue #${issueNumber} is already ${issue.data.state}`);
                      }
                      
                    } catch (error) {
                      console.error(`❌ Error processing issue #${issueNumber}:`, error.message);
                      
                      // 에러 상세 정보 로깅
                      if (error.status === 404) {
                        console.error(`   → Issue #${issueNumber} not found`);
                      } else if (error.status === 403) {
                        console.error(`   → Permission denied for issue #${issueNumber}`);
                      } else {
                        console.error(`   → HTTP ${error.status}: ${error.message}`);
                      }
                    }
                  } else {
                    console.log(`⏭️ Issue #${issueNumber} already processed in this run`);
                  }
                }
              }
            }
            
            // 요약 정보 출력
            console.log(`\n📈 SUMMARY`);
            console.log(`✨ Total commits processed: ${commits.length}`);
            
            if (closedIssues.length > 0) {
              console.log(`🎯 Issues closed: #${closedIssues.join(', #')}`);
              console.log(`🏆 Successfully closed ${closedIssues.length} issue(s)`);
            } else {
              console.log(`📝 No issues found to close in commit messages`);
            }
            
            console.log(`\n✅ Advanced Auto Close process completed successfully!`);

      - name: Create workflow summary
        if: always()
        run: |
          echo "## 🤖 Auto Close Issues Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: Advanced Auto Close Issues" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: develop" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: Push event" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-language keyword support (Korean + English)" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Automatic label addition" >> $GITHUB_STEP_SUMMARY
          echo "- 💬 Detailed comments on closed issues" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Comprehensive logging and error handling" >> $GITHUB_STEP_SUMMARY 