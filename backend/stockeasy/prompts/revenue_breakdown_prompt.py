"""재무제표 분석을 위한 프롬프트 템플릿

이 모듈은 재무제표와 사업보고서 분석을 위한 프롬프트를 정의합니다.
"""

from typing import Any, Dict, List

# 재무제표 분석 프롬프트
REVENUE_BREAKDOWN_USER_PROMPT = """
오늘 날짜: {today_date}
질문: {query}
종목코드: {stock_code}
종목명: {stock_name}

아래는 PDF에서 추출한 재무제표 및 사업보고서 관련 텍스트입니다. 이 정보를 바탕으로 분석하세요:

{revenue_breakdown_data}

위 정보를 바탕으로 질문에 대한 전문적이고 체계적인 재무 분석을 제공하세요.

"""


REVENUE_BREAKDOWN_SYSTEM_PROMPT = """
당신은 기업 분석 전문가입니다. 주어진 사업보고서 내용을 분석하여 다음 정보를 표로 정리해주세요:

1. 주요 매출처 (주요 거래처, 주요 고객)
2. 수주 현황 (계약, 수주 잔고 등)
3. 수주 현황의 분기별 현황
4. 사업부문별 매출 현황 (누적 매출 기준)
5. 제품별 매출 현황 (누적 매출 기준)
6. 지역별 매출 현황 (누적 매출 기준)
7. 사업부문별 매출 비중 (전체 매출 대비 각 사업부의 비율, %)

**요청 사항:**

- 위 정보를 간결한 **표** 형태로 정리해주세요.
- 정보가 없는 항목은 생략합니다.
- 연결기준 데이터와 별도기준 데이터 중 연결기준을 우선으로 사용합니다. 
- 사용자의 요청이 명시적으로 별도기준 데이터를 요청한다면, 별도기준 데이터를 사용합니다.
- 항목 4~6번은 각각 다른 테이블로 구분하여 작성해주세요.
- 항목 7번은 항목 4번의 매출을 기반으로 비중을 계산해주세요.
- 4~6번 표는 다음 형식으로 출력해주세요:
- 최근 4개 분기 데이터를 출력합니다.
- **4~6번 매출 현황은 모두 누적 매출 데이터입니다. 표 제목에 "(누적)"을 명시해주세요.**

[📊 표 예시: 사업부문별 매출 현황(누적, 분기별)]
(단위: 십억원)
| 분기 | 전선 | 중전기 | 기타 |
|------|------|--------|------|
| 24.3Q | 471 | 220 | 110 |
| 24.4Q | 196 | 30 | 20 |
| 25.1Q | 244 | 35 | 20 |

[📊 표 예시: 제품별 매출 현황(누적, 분기별)]
(단위: 십억원)
| 분기 | 나동선 | 알루미늄 | 내수 |
|------|--------|-----------|--------|
| 24.3Q | 471 | 220 | 110 |
| 24.4Q | 196 | 30 | 20 |
| 25.1Q | 244 | 35 | 20 |

[📊 표 예시: 지역별 매출 현황(누적, 분기별)]
(단위: 십억원)
| 분기 | 국내 | 해외 | 기타 |
|------|------|------|------|
| 24.3Q | 471 | 220 | 110 |
| 24.4Q | 196 | 30 | 20 |
| 25.1Q | 244 | 35 | 20 |

[📊 표 예시: 수주잔고 현황(분기별)]
(단위: 십억원)
| 분기 | 누적 수주잔고 | 분기별 수주잔고 |
|------|-------------|-------------------|
| 24.3Q | 1,500 | 1,500 |
| 24.4Q | 2,700 | 1,200 |
| 25.1Q | 3,500 | 800 |

[📈 표 예시: 사업부문별 매출 비중]
(단위: %)
| 분기 | 전선 | 중전기 | 기타 |
|------|------|--------|------|
| 24.3Q | 65.2% | 32.5% | 2.3% |
| 24.4Q | 66.1% | 31.4% | 2.5% |
| 25.1Q | 67.3% | 30.1% | 2.6% |

※ 금액 단위는 테이블 상단을 참조
※ 매출 현황은 모든 분기별 누적 매출 데이터입니다.
※ 매출 비중(%)은 각 분기 매출 기준으로 계산된 비율입니다.
※ 매출액이 없는 항목은 '-'로 표기해주세요.
※ 대부분의 기업은 1분기(1Q)가 첫분기 입니다.
"""


def format_revenue_breakdown_data(formatted_data: List[Dict[str, Any]]) -> str:
    """재무 데이터를 문자열로 포맷팅합니다.

    Args:
        financial_data: 재무 데이터 리스트

    Returns:
        str: 포맷팅된 재무 데이터 문자열
    """
    if not formatted_data:
        print("[FIN_FORMAT] 입력 데이터가 비어 있습니다.")
        return "재무 데이터가 없습니다."

    # 원본 데이터 보존을 위해 복사본 생성
    result_strings = []

    for idx, item in enumerate(formatted_data):
        # 문자열인 경우 그대로 추가
        if isinstance(item, str):
            result_strings.append(item)
            continue

        # 딕셔너리가 아닌 경우 건너뛰기
        if not isinstance(item, dict):
            print(f"[FIN_FORMAT] 경고: 잘못된 데이터 타입: {type(item)} (인덱스 {idx})")
            continue

        # 필요한 값 추출
        source = item.get("source", "알 수 없는 출처")
        date = item.get("date", "날짜 없음")
        content = item.get("content", "")
        indicators = item.get("financial_indicators", {})

        data_str = f"[출처: {source} ({date})]\n"

        # 주요 재무 지표가 있으면 먼저 표시
        if indicators:
            data_str += "\n## 주요 재무 지표 관련 텍스트:\n"
            for key, value in indicators.items():
                data_str += f"\n### {key}:\n{value}\n"

        # 보고서 내용 추가
        data_str += f"\n## 보고서 본문:\n{content}\n"

        # 결과 문자열 목록에 추가 (원본 데이터를 변경하지 않음)
        result_strings.append(data_str)

    print(f"[FIN_FORMAT] 결과 문자열 수: {len(result_strings)}")
    result = "\n\n===== 보고서 구분선 =====\n\n".join(result_strings)
    print(f"[FIN_FORMAT] 반환되는 최종 문자열 길이: {len(result)}")

    # 모든 포맷팅된 문자열을 구분선으로 연결하여 반환
    return result
