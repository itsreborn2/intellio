version: '3.8'

services:
  postgres:
    image: postgres:15
    command: postgres -c timezone=Asia/Seoul
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-100}
      PGDATA: /var/lib/postgresql/data/pgdata
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - "5055:80"
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network

  tika:
    image: apache/tika:latest
    ports:
      - "9998:9998"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 10s
      timeout: 5s
      retries: 3

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    volumes:
      - ./backend:/backend # 개발 환경에서만 사용\
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  celery-doceasy:
    build:
      context: .
      dockerfile: Dockerfile.celery.doceasy
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - app-network

  celery-stockeasy:
    build:
      context: .
      dockerfile: Dockerfile.celery.stockeasy
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - app-network

  flower:
    image: mher/flower
    env_file:
      - .env
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-doceasy
      - celery-stockeasy
    networks:
      - app-network

  # frontend-doceasy:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.frontend.doceasy
  #   ports:
  #     - "3010:3010"
  #   env_file:
  #     - frontend/doceasy/.env.production
  #   depends_on:
  #     - fastapi
  #   networks:
  #     - app-network

  # nginx:
  #   image: nginx:latest
  #   depends_on:
  #     #- frontend-doceasy
  #     - fastapi
  #   networks:
  #     - app-network
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - ./nginx/intellio.prod.conf:/etc/nginx/conf.d/default.conf
  #     - /etc/letsencrypt:/etc/letsencrypt

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
