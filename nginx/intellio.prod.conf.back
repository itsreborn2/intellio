# 유지보수 모드 설정
geo $remote_addr $maintenance_ip { 
    default 1;          # 기본적으로 유지보수 모드 활성화(1, 점검중), 비활성(0, 페이지접속가능) 
    127.0.0.1 0;        # 로컬호스트는 유지보수 모드 비활성화
    218.38.24.30 0;     # 영호
    14.4.216.143 0;     # 상균
    49.169.245.211 0;  # 훈
}

# HTTP를 HTTPS로 리다이렉트
server {
    listen 80;
    listen [::]:80;
    server_name intellio.kr www.intellio.kr doceasy.intellio.kr stockeasy.intellio.kr;

    location / {
        return 301 https://$host$request_uri;
    }
}

# Main 서비스 - HTTPS 서버 설정
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name intellio.kr www.intellio.kr;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/intellio.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/intellio.kr/privkey.pem;

    # SSL 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # 보안 헤더 설정
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # 파일 업로드 크기 제한 설정
    client_max_body_size 500M;

    # 네이버 사이트 소유 확인 파일
    location = /naver05e1a36b2c19c00e7770c3727a983d6d.html {
        root /home/intellio_korea/intellio_prod/frontend/main/public;
        access_log off; # 불필요한 로그 생성을 방지합니다.
    }

    location = /naver4a501a73ba782a5091dd8118f800540f.html {
        root /home/intellio_korea/intellio_prod/frontend/main/public;
        access_log off;
    }

    # 유지보수 페이지 설정
    location = /maintenance.html {
        root /etc/nginx;
        internal;
    }

    # n8n 설정.
    location /n8n/ {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:5678/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        rewrite ^/n8n/(.*)$ /$1 break;
    }

    # pgAdmin 설정
    location /pgadmin {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:5055;
        proxy_set_header X-Script-Name /pgadmin;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 지원
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 타임아웃 설정
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }

    # Main 연결 (port 3000)
    location / {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Favicon
    location = /favicon.ico {
        proxy_pass http://localhost:3000/favicon.ico;
        access_log off;
        expires 30d;
    }

    # FastAPI 백엔드 API
    location /api/ {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;

        # 디버깅을 위한 로깅 추가
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log debug;

        # CORS 헤더 제거 (FastAPI에서 처리)
        proxy_hide_header 'Access-Control-Allow-Origin';
        proxy_hide_header 'Access-Control-Allow-Methods';
        proxy_hide_header 'Access-Control-Allow-Headers';
    }

    # 유지보수 페이지 설정
    error_page 503 /maintenance.html;
}

# DocEasy 서비스 - HTTPS 서버 설정
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name doceasy.intellio.kr;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/intellio.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/intellio.kr/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # 보안 헤더 설정
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # 파일 업로드 크기 제한 설정
    client_max_body_size 500M;

    location = /naverfeeb3e00021b13204252db129c13f445.html {
        root /home/intellio_korea/intellio_prod/frontend/doceasy/public;
        access_log off;
    }

    # 유지보수 페이지 설정
    location = /maintenance.html {
        root /etc/nginx;
        internal;
    }

    # Next.js 정적 파일
    location /_next/static/ {
        proxy_pass http://localhost:3010/_next/static/;
        expires 365d;
        access_log off;
        add_header Cache-Control "public, no-transform";
    }

    # Favicon
    location = /favicon.ico {
        proxy_pass http://localhost:3010/favicon.ico;
        access_log off;
        expires 30d;
    }

    location / {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:3010;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # FastAPI 백엔드 API
    location /api/ {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;

        # 디버깅을 위한 로깅 추가
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log debug;

        # CORS 헤더 제거 (FastAPI에서 처리)
        proxy_hide_header 'Access-Control-Allow-Origin';
        proxy_hide_header 'Access-Control-Allow-Methods';
        proxy_hide_header 'Access-Control-Allow-Headers';
    }

    # 정적 파일 캐싱
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        proxy_pass http://localhost:3010;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # 유지보수 페이지 설정
    error_page 503 /maintenance.html;
}

# Stockeasy 서비스 - HTTPS 서버 설정
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name stockeasy.intellio.kr;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/intellio.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/intellio.kr/privkey.pem;

    # SSL 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # 보안 헤더 설정
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # 파일 업로드 크기 제한 설정
    client_max_body_size 500M;

    location = /navera911d5c653da42817aaa194970d2064b.html {
        root /home/intellio_korea/intellio_prod/frontend/stockeasy/public;
        access_log off;
    }

    # 유지보수 페이지 설정
    location = /maintenance.html {
        root /etc/nginx;
        internal;
    }

    # Stockeasy 연결 (port 3020)
    location / {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:3020;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
    }

    # Favicon
    location = /favicon.ico {
        proxy_pass http://localhost:3020/favicon.ico;
        access_log off;
        expires 30d;
    }

    # FastAPI 백엔드 API
    location /api/ {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }

        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;

        # 디버깅을 위한 로깅 추가
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log debug;

        # CORS 헤더 제거 (FastAPI에서 처리)
        proxy_hide_header 'Access-Control-Allow-Origin';
        proxy_hide_header 'Access-Control-Allow-Methods';
        proxy_hide_header 'Access-Control-Allow-Headers';
    }

    # Next.js 정적 파일
    location /_next/ {
        proxy_pass http://localhost:3020;
        expires 365d;
        access_log off;
        add_header Cache-Control "public, no-transform";
    }

    # 정적 파일 캐싱
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        proxy_pass http://localhost:3020;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
    
    # requestfile 디렉토리를 위한 새로운 설정
    location /requestfile/ {
        # 유지보수 모드 체크
        if ($maintenance_ip) {
            return 503;
        }
    
        alias /mnt/volume_sgp1_02/intellio_prod/frontend/stockeasy/public/requestfile/;
        
        # 심볼릭 링크 허용 옵션
        disable_symlinks off;
        
        # 디버그 정보 추가
        add_header X-Debug-Path $request_filename always;
        add_header X-Debug-Uri $uri always;
        
        # CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        # 파일 유형 설정
        default_type text/csv;
        
        # OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
        
        # 로깅 설정
        access_log /var/log/nginx/rs_etf_csv_access.log;
        error_log /var/log/nginx/rs_etf_csv_error.log debug;
    }

    # 파일 다운로드 경로 설정
    location /download_chat_session/ {
        proxy_pass http://localhost:8000/download_chat_session/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 파일 다운로드를 위한 버퍼 설정
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # 타임아웃 설정 (큰 파일 다운로드 고려)
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        
        # 접근 로그 기록
        access_log /var/log/nginx/download_access.log;
        error_log /var/log/nginx/download_error.log;
    }

    # 유지보수 페이지 설정 
    error_page 503 /maintenance.html;
}