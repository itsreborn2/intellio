"""split_session_model

Revision ID: 7bc6492116ce
Revises: 595d4c6dfcc1
Create Date: 2023-12-24 01:29:26.000000

"""
from typing import Sequence, Union
from datetime import datetime

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7bc6492116ce'
down_revision: Union[str, None] = '595d4c6dfcc1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. documents 테이블의 status 컬럼 타입 변경
    op.execute(text("""
        ALTER TABLE documents 
        ALTER COLUMN status TYPE varchar(20) 
        USING status::varchar(20)
    """))
    
    # 2. document_status enum 제거
    op.execute(text('DROP TYPE IF EXISTS document_status'))
    
    # 3. NULL 이메일 처리
    op.execute(text("""
        UPDATE users 
        SET email = 'anonymous_' || id || '@temp.com' 
        WHERE email IS NULL OR email = '';
    """))
    
    # 4. 이메일 NOT NULL 및 인덱스 설정
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    
    # 기존 인덱스가 있는지 확인 후 생성
    conn = op.get_bind()
    result = conn.execute(text("""
        SELECT COUNT(*) 
        FROM pg_indexes 
        WHERE tablename = 'users' 
        AND indexname = 'users_email_key';
    """))
    if result.scalar() > 0:
        op.drop_constraint('users_email_key', 'users', type_='unique')
    
    # 새 인덱스 생성
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    
    # 5. 새로운 사용자 필드 추가 (nullable로 시작)
    op.add_column('users', sa.Column('hashed_password', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_superuser', sa.Boolean(), nullable=True))
    
    # 6. 기본값으로 업데이트
    op.execute(text("UPDATE users SET hashed_password = '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewKyNiAYMxRHHJ.m' WHERE hashed_password IS NULL"))  # 기본 비밀번호: 'changeme123'
    op.execute(text("UPDATE users SET is_active = TRUE WHERE is_active IS NULL"))
    op.execute(text("UPDATE users SET is_superuser = FALSE WHERE is_superuser IS NULL"))
    
    # 7. NOT NULL 제약조건 추가
    op.alter_column('users', 'hashed_password',
                    existing_type=sa.String(length=255),
                    nullable=False)
    op.alter_column('users', 'is_active',
                    existing_type=sa.Boolean(),
                    nullable=False)
    op.alter_column('users', 'is_superuser',
                    existing_type=sa.Boolean(),
                    nullable=False)
    
    # 8. 불필요한 컬럼 제거
    op.drop_column('users', 'ip_address')
    op.drop_column('users', 'is_anonymous')
    op.drop_column('users', 'analysis_count')
    
    # 9. 나머지 변경사항들
    op.alter_column('document_chunks', 'content',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('document_chunks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('document_chunks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    
    # document_chunks 외래 키 재설정
    result = conn.execute(text("""
        SELECT COUNT(*) 
        FROM pg_constraint 
        WHERE conname = 'document_chunks_document_id_fkey';
    """))
    if result.scalar() > 0:
        op.drop_constraint('document_chunks_document_id_fkey', 'document_chunks', type_='foreignkey')
    op.create_foreign_key(None, 'document_chunks', 'documents', ['document_id'], ['id'])
    
    op.alter_column('documents', 'mime_type',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('documents', 'extracted_text',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('documents', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    
    # documents 외래 키 재설정
    result = conn.execute(text("""
        SELECT COUNT(*) 
        FROM pg_constraint 
        WHERE conname = 'documents_project_id_fkey';
    """))
    if result.scalar() > 0:
        op.drop_constraint('documents_project_id_fkey', 'documents', type_='foreignkey')
    op.create_foreign_key(None, 'documents', 'projects', ['project_id'], ['id'])
    
    op.alter_column('sessions', 'session_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    
    # sessions 외래 키 재설정
    result = conn.execute(text("""
        SELECT COUNT(*) 
        FROM pg_constraint 
        WHERE conname = 'sessions_user_id_fkey';
    """))
    if result.scalar() > 0:
        op.drop_constraint('sessions_user_id_fkey', 'sessions', type_='foreignkey')
    op.create_foreign_key(None, 'sessions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. sessions 외래 키 복구
    op.drop_constraint(None, 'sessions', type_='foreignkey')
    op.create_foreign_key('sessions_user_id_fkey', 'sessions', 'users', ['user_id'], ['id'])
    
    # 2. sessions 컬럼 타입 복구
    op.alter_column('sessions', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('sessions', 'session_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    
    # 3. documents 관련 변경사항 복구
    op.drop_constraint(None, 'documents', type_='foreignkey')
    op.create_foreign_key('documents_project_id_fkey', 'documents', 'projects', ['project_id'], ['id'])
    op.alter_column('documents', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('documents', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('documents', 'extracted_text',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    
    # 4. document_status enum 복구
    op.execute("CREATE TYPE document_status AS ENUM ('REGISTERED', 'PROCESSING', 'COMPLETED', 'FAILED')")
    
    # status 컬럼을 enum으로 변경
    op.execute(text("""
        ALTER TABLE documents 
        ALTER COLUMN status TYPE document_status 
        USING status::document_status
    """))
    
    op.alter_column('documents', 'mime_type',
               existing_type=sa.VARCHAR(),
               nullable=False)
    
    # 5. document_chunks 관련 변경사항 복구
    op.drop_constraint(None, 'document_chunks', type_='foreignkey')
    op.create_foreign_key('document_chunks_document_id_fkey', 'document_chunks', 'documents', ['document_id'], ['id'])
    op.alter_column('document_chunks', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('document_chunks', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('document_chunks', 'content',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    
    # 6. users 관련 변경사항 복구
    op.add_column('users', sa.Column('analysis_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_anonymous', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
    op.drop_index('ix_users_email', table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'hashed_password')
    # ### end Alembic commands ###
