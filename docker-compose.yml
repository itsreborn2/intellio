services:
  postgres:
    image: pgvector/pgvector:pg15
    command: postgres -c timezone=Asia/Seoul
    env_file:
      - .env.development
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=postgres
      - DB_NAME=${POSTGRES_DB}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=40
      - ADMIN_USERS=${POSTGRES_USER}
      - LISTEN_PORT=6432
      - AUTH_TYPE=scram-sha-256   # 또는 md5
    ports:
      - "127.0.0.1:6432:6432"  # localhost에서만 접근 가능
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB 컨테이너 추가
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    env_file:
      - backend/stockeasy/collector/.env.development
    environment:
      - POSTGRES_DB=${TIMESCALE_DB}
      - POSTGRES_USER=${TIMESCALE_USER}
      - POSTGRES_PASSWORD=${TIMESCALE_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_HOST_AUTH_METHOD=md5
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
      - TZ=Asia/Seoul
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./backend/stockeasy/collector/database/init:/docker-entrypoint-initdb.d
      - ./backend/stockeasy/collector/database/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    # ports 제거 - pgbouncer를 통해서만 접근
    # - "127.0.0.1:5433:5432"
    command: >
      postgres 
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c timezone=Asia/Seoul
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c listen_addresses='*'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U collector_user -d stockeasy_collector"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB용 PgBouncer 추가
  pgbouncer-timescale:
    image: edoburu/pgbouncer:latest
    environment:
      - DB_USER=${TIMESCALE_USER}
      - DB_PASSWORD=${TIMESCALE_PASSWORD}
      - DB_HOST=timescaledb
      - DB_NAME=${TIMESCALE_DB}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=100
      - DEFAULT_POOL_SIZE=20
      - ADMIN_USERS=${TIMESCALE_USER}
      - LISTEN_PORT=6432
      - AUTH_TYPE=scram-sha-256
    ports:
      - "127.0.0.1:6433:6432"  # localhost에서만 접근 가능
    depends_on:
      - timescaledb
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U collector_user -d stockeasy_collector"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - .env.development
    ports:
      - "5055:80"
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis  # 로그 디렉토리 마운트
    command: redis-server --logfile /var/log/redis/redis.log --loglevel notice
    networks:
      - app-network

  tika:
    image: apache/tika:latest
    ports:
      - "9998:9998"
    environment:
      - JAVA_OPTS=-Xmx1g
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9998/tika"]
      interval: 10s
      timeout: 5s
      retries: 3

  base-image-dev:
    build:
      context: .
      dockerfile: Dockerfile.base.dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: intellio-base-dev:latest
    volumes:
      - ./backend:/backend
    profiles: ["build"]

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi.dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes:
      - ./backend:/backend:rw,delegated
    env_file:
      - .env.development
    environment:
      - ENV=development
    ports:
      - "127.0.0.1:8000:8000"  # localhost에서만 접근 가능
    depends_on:
      - pgbouncer
      - redis
      - tika
    #restart: unless-stopped
    networks:
      - app-network

  stock-data-collector:
    build:
      context: .
      dockerfile: Dockerfile.stockeasy.collector.dev
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes:
      - ./backend:/backend:rw,delegated
      - ./backend/stockeasy/collector/logs:/backend/stockeasy/collector/logs:rw
    env_file:
      - .env.development
    environment:
      - ENV=development
    ports:
      - "127.0.0.1:8001:8001"  # localhost에서만 접근 가능
    depends_on:
      - pgbouncer              # 기존 DB 연결
      - pgbouncer-timescale    # TimescaleDB 연결 추가
      - redis
    restart: unless-stopped
    networks:
      - app-network

  celery-doceasy:
    build:
      context: .
      dockerfile: Dockerfile.celery.doceasy.dev
    volumes:
      - ./backend:/backend
    env_file:
      - .env.development
    depends_on:
      - pgbouncer
      - redis
    #restart: unless-stopped
    networks:
      - app-network

  celery-stockeasy:
    build:
      context: .
      dockerfile: Dockerfile.celery.stockeasy.dev
    volumes:
      - ./backend:/backend
    env_file:
      - .env.development
    depends_on:
      - pgbouncer
      - redis
    networks:
      - app-network

  flower:
    image: mher/flower
    env_file:
      - .env.development
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-doceasy
      - celery-stockeasy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  timescale_data: 