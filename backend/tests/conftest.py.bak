import pytest
import asyncio
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.pool import StaticPool

from app.core.database import Base
from app.models.project import Project
from app.models.project_category import ProjectCategory
from app.core.config import settings

# 실제 데이터베이스 URL 사용
DATABASE_URL = f"postgresql+asyncpg://{settings.POSTGRES_USER}:{settings.POSTGRES_PASSWORD}@{settings.POSTGRES_HOST}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}"

@pytest.fixture(scope="session")
def event_loop():
    """이벤트 루프 생성"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture(scope="session")
def async_engine():
    """비동기 엔진 생성"""
    engine = create_async_engine(
        DATABASE_URL,
        poolclass=StaticPool,
        echo=True,
        pool_pre_ping=True
    )
    return engine

@pytest.fixture(scope="session")
async def init_db(async_engine):
    # 테스트 시작 시 테이블 초기화하지 않음
    yield

@pytest.fixture
async def async_session(async_engine, init_db) -> AsyncGenerator[AsyncSession, None]:
    """비동기 세션 생성"""
    session_maker = async_sessionmaker(
        async_engine,
        class_=AsyncSession,
        expire_on_commit=False,
        autoflush=False
    )
    
    async with session_maker() as session:
        yield session
