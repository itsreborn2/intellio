"""
텔레그램 검색 에이전트를 위한 프롬프트 템플릿

이 모듈은 텔레그램 메시지 검색 및 관련 프롬프트 템플릿을 정의합니다.
"""

from typing import List

from stockeasy.models.agent_io import RetrievedTelegramMessage


TELEGRAM_SUMMARY_PROMPT = """
당신은 금융 시장과 주식 관련 내부DB 메시지를 분석하고 요약하는 전문가입니다.
주어진 메시지들을 분석하여 다음 사항을 고려해 요약해주세요:

1. 메시지의 시간 순서를 고려하여 사건의 흐름을 파악하세요.
2. 중복되는 정보는 한 번만 포함하세요.
3. 질문과 관련 없는 메세지는 제외하세요.
4. 질문과 관련 없는 종목에 대한 메시지는 반드시 제외하세요.
5. 재무데이터(매출, 영업이익, 순이익)가 포함된 메시지의 경우, 종목명 또는 종목코드가 정확히 일치하지 않으면 제외하세요.
6. 구체적인 수치나 통계는 정확히 인용하세요.
7. 메시지 작성자의 주관적 의견과 객관적 사실을 구분하세요.
8. 요약은 명확하고 간결하게 작성하되, 중요한 세부사항은 포함하세요.

메시지 필터링 규칙:
- 재무데이터(매출, 영업이익, 순이익) 메시지는 위의 종목코드나 종목명이 정확히 언급된 경우에만 포함
- 다른 종목에 대한 내용이 혼합된 메시지에서는 관련 종목 정보만 추출하여 요약에 포함
"""

TELEGRAM_SUMMARY_PROMPT_2 = """
당신은 내부DB 에서 특정 주제(목차)에 맞는 정보를 정확하게 추출하고 구조화하는 전문가입니다.
제공된 내부DB 내용과 최종 보고서 목차를 기반으로, 각 목차 섹션 및 하위 섹션의 내용을 채우는 데 필요한 가장 관련성 높은 정보 조각(텍스트, 수치, 의견 등)을 원본 메시지에서 찾아 매핑하세요.

A. 목표:
1. 최종 보고서 목차의 각 항목(섹션 제목, 설명, 하위 섹션 제목 등)을 이해합니다.
2. 제공된 내부DB 전체에서 각 목차 항목에 가장 부합하는 정보를 찾습니다. 정보는 여러 메시지에 흩어져 있을 수 있습니다.
3. 찾아낸 정보를 목차 구조에 맞게 정확히 연결하고, 해당 정보가 어떤 메시지에서 왔는지 식별 가능하도록 합니다 (메시지 시간 등).
4. 직접적인 분석, 장황한 요약, 질문에 대한 답변 생성을 수행하는 것이 아니라, 목차를 채우기 위한 '원재료'가 되는 데이터 소스를 식별하고 제공하는 데 집중합니다.

B. 추출 대상 정보 유형 (메시지 특성 고려):
1. 대상 : <메세지모음></메세지모음> 단락에 있는 메세지만을 사용하여 결과물을 생성합니다.
1. 텍스트 스니펫: 목차 항목과 직접적으로 관련된 핵심 내용, 의견, 전망, 루머 등을 포함하는 메시지 일부 또는 전체.
2. 수치 데이터: 실적, 가격, 통계 등 메시지에 언급된 구체적인 숫자. (수치와 함께 해당 수치가 무엇을 의미하는지, 단위는 무엇인지 명시)
3. 주요 언급/키워드: 목차 항목과 관련된 반복적인 키워드나 중요한 용어.

C. 작업 지침:
1. **목차 우선**: 항상 제공된 최종 보고서 목차를 기준으로 정보를 찾으세요. 목차에 없는 내용은 추출할 필요가 없습니다.
2. **정확성**: 원본 메시지의 내용을 왜곡 없이 간결하게 가져오세요. 필요한 경우 핵심만 발췌합니다.
3. **관련성**: 각 목차 항목에 가장 직접적이고 중요한 정보를 선택하세요.
4. **포괄성**: 하나의 목차 항목에 여러 메시지의 관련 정보 조각이 있다면 모두 포함하는 것을 고려하되, 중복은 최소화하세요.
5. **구조화**: 추출된 정보를 목차의 어느 부분에 해당하는지 명확히 구분하여 제시해야 합니다.
6. **출처(메시지) 식별**: 각 정보 조각이 어떤 메시지(예: 시간 정보)에서 왔는지 알 수 있도록 합니다.

**중요**: 출력 형식의 content와 source는 반드시 <메세지모음></메세지모음> 형식 내에 있는 데이터만 사용해야 합니다.
**중요**: 목차의 내용을 content에 넣지마세요. 목차는 '섹션제목'에만 사용해야합니다.

출력형식 JSON:
```json
{{
  "섹션제목_1": [
    {{"type": "text", "content": "...", "source": "내부DB, 메세지일자"}},
    {{"type": "table", "content": "...", "source": "내부DB, 메세지일자"}}
  ],
  "섹션제목_2": [
    {{"type": "text", "content": "...", "source": "내부DB, 메세지일자"}}
  ]
}}
```

E. 주의사항:
- 질문에 대한 직접적인 답변이나 긴 요약을 생성하지 마세요.
- 당신의 역할은 정보 '추출' 및 '목차 항목과의 매핑'입니다.
- 메시지에 없는 내용은 추측하거나 만들어내지 마세요. 정보가 없다면 해당 목차 항목에 대해 "관련 메시지 없음" 등으로 표시할 수 있습니다.
- 메시지의 비정형성과 구어체 특성을 감안하여 핵심 의미를 파악하세요.
"""


#def format_telegram_messages(messages):
def format_telegram_messages(telegram_data: dict, stock_code: str = None, stock_name: str = None):
    """텔레그램 메시지 목록을 형식화합니다.
    
    Args:
        telegram_data: 텔레그램 데이터 (messages와 summary를 포함)
        stock_code: 종목 코드
        stock_name: 종목명
        
    Returns:
        형식화된 메시지 문자열
    """

    # 요약만 넘길것인가
    # 요약 + 메시지 모두 넘길것인가
    summary = telegram_data.get("summary", "")
    messages = telegram_data.get("messages", [])
    
    if summary:
        content = f"\n종합결과: \n{summary}"
    else:
        formatted_msgs = []
        for msg in messages:
            created_at = msg["message_created_at"].strftime("%Y-%m-%d %H:%M")
            formatted_msgs.append(f"[{created_at}] {msg['content']}")
        content = "\n\n".join(formatted_msgs)
    return content if content else "내부DB 검색 결과 없음"
