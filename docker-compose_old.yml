services:
  postgres:
    image: pgvector/pgvector:pg15
    command: postgres -c timezone=Asia/Seoul
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=postgres
      - DB_NAME=${POSTGRES_DB}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=40
      - ADMIN_USERS=${POSTGRES_USER}
      - LISTEN_PORT=6432
      - AUTH_TYPE=scram-sha-256   # 또는 md5
    ports:
      - "6432:6432"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - "5055:80"
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  tika:
    image: apache/tika:latest
    ports:
      - "9998:9998"
    environment:
      - JAVA_OPTS=-Xmx1g
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9998/tika"]
      interval: 10s
      timeout: 5s
      retries: 3

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi.dev
      args:
        BUILDKIT_INLINE_CACHE: 1  
    ports:
      - "8000:8000"
    depends_on:
      - pgbouncer
      - redis
      - tika
    #restart: unless-stopped
    networks:
      - app-network

  stock-data-collector:
    build:
      context: .
      dockerfile: Dockerfile.stockeasy.collector.dev
      args:
        BUILDKIT_INLINE_CACHE: 1  
    ports:
      - "8001:8001"
    depends_on:
      - pgbouncer
      - redis
    restart: unless-stopped
    networks:
      - app-network

  celery-doceasy:
    build:
      context: .
      dockerfile: Dockerfile.celery.doceasy.dev  
    depends_on:
      - pgbouncer
      - redis
    #restart: unless-stopped
    networks:
      - app-network

  celery-stockeasy:
    build:
      context: .
      dockerfile: Dockerfile.celery.stockeasy.dev  
    depends_on:
      - pgbouncer
      - redis
    networks:
      - app-network

  flower:
    image: mher/flower
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-doceasy
      - celery-stockeasy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
